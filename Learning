df = pd.read_csv('all_data.csv', engine='python')
df.head()

# train/test 기준점 연산
data_len = df.iloc[:,0:1].shape[0]
train_ratio = 0.7
ratio_point = round(data_len * train_ratio)

# timesteps 설정
timesteps = 120

# train/test dataset 설정
train_set = df.iloc[:ratio_point, 3:4].values
test_set = df.iloc[ratio_point-timesteps:, 3:4].values

# scaler 설정
scaler = MinMaxScaler(feature_range = (0,1))

# scaled set 설정
train_set_scaled = scaler.fit_transform(train_set)
test_set = test_set.reshape(-1, 1)
test_set_scaled = scaler.transform(test_set)

# x_train / y_train 설정
x_train = []
y_train = []

for i in range(timesteps, ratio_point) :
    x_train.append(train_set_scaled[i-timesteps:i, 0])
    y_train.append(train_set_scaled[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# x_test 설정
x_test = []

for i in range(timesteps, data_len - ratio_point + timesteps) :
    x_test.append(test_set_scaled[i-timesteps:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# 모델 구성
with tf.device('/gpu:0'):
    model = models.Sequential()
    model.add(layers.LSTM(units=256, input_shape = (x_train.shape[1], 1)))
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(units=1, activation='relu'))
    model.compile(optimizer = 'adam', loss = 'mean_squared_error')

# 모델 동작
history = model.fit(x_train, y_train, epochs=100, batch_size=32)

# loss visualization
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch

plt.figure(figsize=(28,10))
plt.xlabel('epochs')
plt.ylabel('loss')
plt.plot(hist['epoch'], hist['loss'])
plt.legend()
plt.show()

# 수치 예측
predict_price = model.predict(x_test)
predict_price_inverse = scaler.inverse_transform(predict_price)

test_x_axis = []

for i in range(0, data_len - ratio_point) :
    test_x_axis.append(i)

plt.figure(figsize=(28,10))
plt.plot(test_x_axis, df.iloc[ratio_point:, 3:4].values, color = 'red', label = 'Real BTC Price')
plt.plot(test_x_axis, predict_price_inverse, color = 'blue', label = 'Predicted BTC Price')
plt.xticks(np.arange(0,data_len - ratio_point + 50,50))
plt.title('BTC Prediction')
plt.xlabel('Date')
plt.ylabel('BTC price')
plt.legend()
plt.show()
