# 데이터 프레임 입력 및 확인
df = pd.read_csv('all_data.csv', engine='python')

# 훈련 데이터 생성
low_training_set = df.iloc[:1000, 1:2].values
low_test_set = df.iloc[1000:, 1:2].values

scaler = MinMaxScaler()
low_training_set_scaled = scaler.fit_transform(low_training_set)

x_train = []
y_train = []

for i in range(60, 1000) :
    x_train.append(low_training_set_scaled[i-60:i, 0])
    y_train.append(low_training_set_scaled[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# 모델 구축
with tf.device('/gpu:0'):
    model = models.Sequential()
    model.add(layers.LSTM(units=25, input_shape = (x_train.shape[1], 1)))
    model.add(layers.Dropout(0.05))
    model.add(layers.Dense(units=1, activation='elu'))
    model.compile(optimizer='adam', loss = 'mean_absolute_error')
    
# 모델 동작
history = model.fit(x_train, y_train, epochs=100, batch_size=32)

# 손실 점수 시각화
hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch

plt.figure(figsize=(28,10))
plt.xlabel('epochs')
plt.ylabel('loss')
plt.plot(hist['epoch'], hist['loss'])
plt.legend()
plt.show()

# 테스트 데이터 생성
low_dataset_train = df.iloc[:1000, 1:2]
low_dataset_test = df.iloc[1000:, 1:2]
low_dataset_total = pd.concat((low_dataset_train, low_dataset_test), axis=0)
inputs = low_dataset_total[len(low_dataset_total) - len(low_dataset_test) - 60:].values
inputs = inputs.reshape(-1, 1)
inputs = scaler.transform(inputs)
x_test = []
for i in range(60, 441) :
    x_test.append(inputs[i-60:i, 0])
x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# 예측
predict_price = model.predict(x_test)
predict_price_inverse = scaler.inverse_transform(predict_price)

# 예측값 시각화
tententen = []
for i in range(0, 381) :
    tententen.append(i)

tententen = np.array(tententen)
tententen = np.reshape(tententen, (tententen.shape[0], 1))

plt.figure(figsize=(28,10))
plt.plot(tententen,low_dataset_test.values, color = 'red', label = 'Real BTC Price')
plt.plot(tententen,predict_price_inverse, color = 'blue', label = 'Predicted BTC Price')
plt.xticks(np.arange(0,460,50))
plt.title('BTC Prediction')
plt.xlabel('Date')
plt.ylabel('BTC price')
plt.legend()
plt.show()
